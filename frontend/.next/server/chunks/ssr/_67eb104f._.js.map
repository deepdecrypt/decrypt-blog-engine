{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 30, "column": 0}, "map": {"version":3,"sources":["file:///Users/stashknocker/Documents/Deep%20Decrypt/frontend/src/lib/api.ts"],"sourcesContent":["interface StrapiPost {\n  id: number;\n  documentId: string;\n  Title: string;\n  Content: Array<{\n    type: string;\n    children: Array<{\n      type: string;\n      text: string;\n    }>;\n  }>;\n  Slug: string;\n  createdAt: string;\n  updatedAt: string;\n  publishedAt: string;\n  Thumbnail?: {\n    id: number;\n    url: string;\n  };\n}\n\nexport async function fetchPosts() {\n  try {\n    const apiUrl = `${process.env.NEXT_PUBLIC_API_URL}/api/posts?populate=*`;\n    console.log('Fetching from URL:', apiUrl);\n    \n    const res = await fetch(apiUrl);\n    if (!res.ok) {\n      throw new Error(`HTTP error! status: ${res.status}`);\n    }\n    const data = await res.json();\n    console.log('Raw Strapi response:', JSON.stringify(data, null, 2));\n\n    // Check if data has the expected structure\n    if (!data.data || !Array.isArray(data.data)) {\n      console.error('Unexpected data structure:', data);\n      return [];\n    }\n\n    // Log each post's structure\n    data.data.forEach((post: StrapiPost, index: number) => {\n      console.log(`Post ${index + 1} structure:`, {\n        id: post.id,\n        Title: post.Title,\n        Content: post.Content,\n        Slug: post.Slug\n      });\n    });\n\n    // Validate each post has the required fields\n    const validPosts = data.data.filter((post: StrapiPost) => {\n      const isValid = post?.Title && \n                     Array.isArray(post?.Content) && \n                     post?.Content.length > 0 && \n                     post?.Slug;\n      if (!isValid) {\n        console.warn('Invalid post structure:', post);\n      }\n      return isValid;\n    });\n\n    console.log('Number of valid posts:', validPosts.length);\n    return validPosts;\n  } catch (error) {\n    console.error('Error fetching posts:', error);\n    return [];\n  }\n}\n\nexport async function fetchPostBySlug(slug: string) {\n  try {\n    const res = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/posts?filters[Slug][$eq]=${slug}&populate=*`);\n    if (!res.ok) {\n      throw new Error(`HTTP error! status: ${res.status}`);\n    }\n    const data = await res.json();\n    return data.data?.[0] || null;\n  } catch (error) {\n    console.error('Error fetching post by slug:', error);\n    return null;\n  }\n}\n"],"names":[],"mappings":";;;;AAqBO,eAAe;IACpB,IAAI;QACF,MAAM,SAAS,6DAAmC,qBAAqB,CAAC;QACxE,QAAQ,GAAG,CAAC,sBAAsB;QAElC,MAAM,MAAM,MAAM,MAAM;QACxB,IAAI,CAAC,IAAI,EAAE,EAAE;YACX,MAAM,IAAI,MAAM,CAAC,oBAAoB,EAAE,IAAI,MAAM,EAAE;QACrD;QACA,MAAM,OAAO,MAAM,IAAI,IAAI;QAC3B,QAAQ,GAAG,CAAC,wBAAwB,KAAK,SAAS,CAAC,MAAM,MAAM;QAE/D,2CAA2C;QAC3C,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,MAAM,OAAO,CAAC,KAAK,IAAI,GAAG;YAC3C,QAAQ,KAAK,CAAC,8BAA8B;YAC5C,OAAO,EAAE;QACX;QAEA,4BAA4B;QAC5B,KAAK,IAAI,CAAC,OAAO,CAAC,CAAC,MAAkB;YACnC,QAAQ,GAAG,CAAC,CAAC,KAAK,EAAE,QAAQ,EAAE,WAAW,CAAC,EAAE;gBAC1C,IAAI,KAAK,EAAE;gBACX,OAAO,KAAK,KAAK;gBACjB,SAAS,KAAK,OAAO;gBACrB,MAAM,KAAK,IAAI;YACjB;QACF;QAEA,6CAA6C;QAC7C,MAAM,aAAa,KAAK,IAAI,CAAC,MAAM,CAAC,CAAC;YACnC,MAAM,UAAU,MAAM,SACP,MAAM,OAAO,CAAC,MAAM,YACpB,MAAM,QAAQ,SAAS,KACvB,MAAM;YACrB,IAAI,CAAC,SAAS;gBACZ,QAAQ,IAAI,CAAC,2BAA2B;YAC1C;YACA,OAAO;QACT;QAEA,QAAQ,GAAG,CAAC,0BAA0B,WAAW,MAAM;QACvD,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,OAAO,EAAE;IACX;AACF;AAEO,eAAe,gBAAgB,IAAY;IAChD,IAAI;QACF,MAAM,MAAM,MAAM,MAAM,6DAAmC,8BAA8B,EAAE,KAAK,WAAW,CAAC;QAC5G,IAAI,CAAC,IAAI,EAAE,EAAE;YACX,MAAM,IAAI,MAAM,CAAC,oBAAoB,EAAE,IAAI,MAAM,EAAE;QACrD;QACA,MAAM,OAAO,MAAM,IAAI,IAAI;QAC3B,OAAO,KAAK,IAAI,EAAE,CAAC,EAAE,IAAI;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,OAAO;IACT;AACF","debugId":null}},
    {"offset": {"line": 92, "column": 0}, "map": {"version":3,"sources":["file:///Users/stashknocker/Documents/Deep%20Decrypt/frontend/src/app/blog/%5Bslug%5D/page.tsx"],"sourcesContent":["import { fetchPostBySlug } from '@/lib/api';\nimport { notFound } from 'next/navigation';\n\nexport default async function BlogPost({ params }: { params: { slug: string } }) {\n  const post = await fetchPostBySlug(params.slug);\n\n  if (!post) return notFound();\n\n  const { title, content } = post.attributes;\n\n  return (\n    <main className=\"p-8 max-w-3xl mx-auto\">\n      <h1 className=\"text-4xl font-bold mb-4\">{title}</h1>\n      <div className=\"text-lg leading-relaxed whitespace-pre-line\">\n        {content}\n      </div>\n    </main>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AAAA;;;;AAEe,eAAe,SAAS,EAAE,MAAM,EAAgC;IAC7E,MAAM,OAAO,MAAM,CAAA,GAAA,iHAAA,CAAA,kBAAe,AAAD,EAAE,OAAO,IAAI;IAE9C,IAAI,CAAC,MAAM,OAAO,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD;IAEzB,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,KAAK,UAAU;IAE1C,qBACE,8OAAC;QAAK,WAAU;;0BACd,8OAAC;gBAAG,WAAU;0BAA2B;;;;;;0BACzC,8OAAC;gBAAI,WAAU;0BACZ;;;;;;;;;;;;AAIT","debugId":null}}]
}